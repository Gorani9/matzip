# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Java Spring Boot & Gradle CD

on:
  push:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: 'gradle'

    - name: Setup MySQL
      uses: samin/mysql-action@v1
      with:
        mysql database: 'matzip_db'
        mysql user: ${{ secrets.DB_USERNAME }}
        mysql password: ${{ secrets.DB_PASSWORD }}

    - name: Grant execution permission to gradlew
      run: chmod +x gradlew
      working-directory: server

    - name: Cache gradle
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Build with gradlew
      run: ./gradlew build --no-daemon -x test
      working-directory: server
      env:
        DB_URL: jdbc:mysql://localhost:3306/matzip_db
        DB_USERNAME: ${{ secrets.DB_USERNAME }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        ADMIN_PASSWORD: ${{ secrets.ADMIN_PASSWORD }}
        AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_BUCKET_NAME: ${{ secrets.AWS_BUCKET_NAME }}

    - name: Make directory for delivery
      run: mkdir deploy
      working-directory: server

    - name: Copy jar
      run: cp ./build/libs/*.jar ./deploy
      working-directory: server

    - name: Copy appspec
      run: cp ./appspec.yml ./server/deploy/

    - name: Copy scripts
      run: cp ./scripts/* ./server/deploy/

    - name: Copy Dockerfile
      run: cp ./Dockerfile ./server/deploy/

    - name: Copy docker-compose
      run: cp ./docker-compose.yml ./server/deploy

    - name: Prepare deliver
      run: zip -r -qq -j ./matzip-server-build.zip ./deploy
      working-directory: server

    - name: Deliver to AWS S3
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run:
        aws s3 cp
        --region ap-northeast-2
        --acl private
        ./matzip-server-build.zip s3://matzip-server-build/
      working-directory: server

    - name: Deploy
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run:
        aws deploy create-deployment
        --application-name matzip-server
        --deployment-group-name matzip-server-deploy-group
        --file-exists-behavior OVERWRITE
        --s3-location bucket=matzip-server-build,bundleType=zip,key=matzip-server-build.zip
        --region ap-northeast-2
